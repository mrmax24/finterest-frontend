<div>
  <h1>{{ message }}</h1>
  <button (click)="logout()">Logout</button>
</div>



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Registration Page</title>
</head>
<body>
<div>
  <label for="email">Name:</label>
  <input type="text" id="email" [(ngModel)]="user.login">
</div>
<div>
  <label for="repeatPassword">Email:</label>
  <input type="email" id="repeatPassword" [(ngModel)]="user.email">
</div>
<div>
  <label for="password">Password:</label>
  <input type="password" id="password" [(ngModel)]="user.password">
</div>
<button (click)="registerUser()">Register</button>
</body>
<div *ngIf="errorMessage" class="error-message">
  {{ errorMessage }}
</div>
</html>





<h2>Вхід</h2>
<form (ngSubmit)="login()">
  <div>
    <label for="login">Логін:</label>
    <input type="text" id="login" [(ngModel)]="loginData.login" name="login" required>
  </div>
  <div>
    <label for="password">Пароль:</label>
    <input type="password" id="password" [(ngModel)]="loginData.password" name="password" required>
  </div>
  <button type="submit" [disabled]="!loginData.login || !loginData.password">Увійти</button>
</form>
<div *ngIf="errorMessage" class="error-message">
  {{ errorMessage }}
</div>









import {Component, OnInit} from '@angular/core';
import {HttpClient} from "@angular/common/http";
import {Router} from "@angular/router";
import {AuthService} from "../auth.service";

@Component({
  selector: 'app-registration',
  templateUrl: './registration.component.html',
  styleUrls: ['./registration.component.css']
})
export class RegistrationComponent implements OnInit {
  user = {
    email: '',
    login: '',
    password: '',
  };

  errorMessage: string | undefined

  constructor(private http: HttpClient, private router: Router, private authService: AuthService) { }

  ngOnInit(): void {
  }

  goToLoginPage() {
    this.router.navigate(['/login']);
}

  goToRegisterPage() {
    this.router.navigate(['/register']);
  }
  registerUser() {
    const requestDto = {
      email: this.user.email,
      login: this.user.login,
      password: this.user.password,
    };

    this.errorMessage = undefined


    this.http.post<any>('http://localhost:8080/register', requestDto).subscribe(
      response => {
        console.log(response);
        if (response.token) {
          this.authService.setToken(response.token);
          this.authService.setAuthenticated(true);
          this.router.navigate(['/']);
          const redirectUrl = this.authService.getAndClearRedirectUrl();
          this.router.navigate([redirectUrl || '/']);
          console.log('Redirecting to:', redirectUrl || '/');
        } else {
          this.errorMessage = 'Authentication failed';
        }
      },
      error => {
        if (error.status === 400 && error.error.message) {
          this.errorMessage = error.error.message;
        } else if (error.status === 401) {
          const errorBody = error.error;
          this.errorMessage = errorBody.message;
        } else {
          this.errorMessage = 'Authentication error';
        }
        console.error('Authentication error:', error);
      }
    );
  }
}


    if (this.authService.isLoggedIn()) {





import { Component, OnInit } from '@angular/core';
import { HttpClient } from "@angular/common/http";
import { AuthService } from '../auth.service';
import { environment } from '../../../environment';
import { ActivatedRoute } from '@angular/router';



@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css'],
})

export class DashboardComponent implements OnInit {

  userBalance: UserBalance = new UserBalance();

  constructor(private http: HttpClient,
              private authService: AuthService,
              private route: ActivatedRoute) {
  }

  ngOnInit(): void {
      const headers = this.authService.getAuthorizationHeader();
      const serverUrl = environment.serverUrl;
    this.http.get<UserBalance>(`${serverUrl}`, { headers })
      .subscribe(
        response => {
          this.userBalance.userName = response.userName;
          this.userBalance.currentBalance = response.currentBalance;
        },
        error => {
          console.error('Request error:', error);
        }
      );
    }

  logout() {
    this.authService.logout();
  }
}
class UserBalance {
  userName: string = '';
  currentBalance: string = '';
}





